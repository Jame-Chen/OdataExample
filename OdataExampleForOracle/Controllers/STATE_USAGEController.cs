//------------------------------------------------------------------------------
// <auto-generated>
//    此代码是根据模板生成的。
//
//    手动更改此文件可能会导致应用程序中发生异常行为。
//    如果重新生成代码，则将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace OdataExampleForOracle.Controllers
{
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Web.Http;
    using System.Web.Http.ModelBinding;
    using System.Web.Http.OData;
    using System.Web.Http.OData.Routing;
    using OdataExampleForOracle.Models;
    public partial class STATE_USAGEController:ODataController
    {
            private SJZXEntities db = new SJZXEntities();
    
            // GET: odata/STATE_USAGE
            [EnableQuery]
            public IQueryable<STATE_USAGE> GetSTATE_USAGE()
            {
                return db.STATE_USAGE;
            }
    
            // GET: odata/STATE_USAGE(5)
            [EnableQuery]
            public SingleResult<STATE_USAGE> GetSTATE_USAGE([FromODataUri] string key)
            {
                return SingleResult.Create(db.STATE_USAGE.Where(w => w.US_STATE == key));
            }
    
            // PUT: odata/STATE_USAGE(5)
            public IHttpActionResult Put([FromODataUri] string key, Delta<STATE_USAGE> patch)
            {
                Validate(patch.GetEntity());
    
                if (!ModelState.IsValid)
                {
                    return BadRequest(ModelState);
                }
    
                STATE_USAGE STATE_USAGE = db.STATE_USAGE.Find(key);
                if (STATE_USAGE == null)
                {
                    return NotFound();
                }
    
                patch.Put(STATE_USAGE);
    
                try
                {
                    db.SaveChanges();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!STATE_USAGEExists(key))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
    
                return Updated(STATE_USAGE);
            }
    
            // POST: odata/STATE_USAGE
            public IHttpActionResult Post(STATE_USAGE STATE_USAGE)
            {
                if (!ModelState.IsValid)
                {
                    return BadRequest(ModelState);
                }
    
                db.STATE_USAGE.Add(STATE_USAGE);
                db.SaveChanges();
    
                return Created(STATE_USAGE);
            }
    
            // PATCH: odata/STATE_USAGE(5)
            [AcceptVerbs("PATCH", "MERGE")]
            public IHttpActionResult Patch([FromODataUri] string key, Delta<STATE_USAGE> patch)
            {
                Validate(patch.GetEntity());
    
                if (!ModelState.IsValid)
                {
                    return BadRequest(ModelState);
                }
    
                STATE_USAGE STATE_USAGE = db.STATE_USAGE.Find(key);
                if (STATE_USAGE == null)
                {
                    return NotFound();
                }
    
                patch.Patch(STATE_USAGE);
    
                try
                {
                    db.SaveChanges();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!STATE_USAGEExists(key))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
    
                return Updated(STATE_USAGE);
            }
    
            // DELETE: odata/STATE_USAGE(5)
            public IHttpActionResult Delete([FromODataUri] string key)
            {
                STATE_USAGE STATE_USAGE = db.STATE_USAGE.Find(key);
                if (STATE_USAGE == null)
                {
                    return NotFound();
                }
    
                db.STATE_USAGE.Remove(STATE_USAGE);
                db.SaveChanges();
    
                return StatusCode(HttpStatusCode.NoContent);
            }
    
            protected override void Dispose(bool disposing)
            {
                if (disposing)
                {
                    db.Dispose();
                }
                base.Dispose(disposing);
            }
    
            private bool STATE_USAGEExists(string key)
            {
                return db.STATE_USAGE.Count(e => e.US_STATE == key) > 0;
            }
      
    }
}
